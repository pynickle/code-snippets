{
    "abs": {
        "prefix": "abs",
        "body": [
            "abs(${1:number})"
        ],
        "description": "return an abslute value of a number"
    },
    "all": {
        "prefix": "all",
        "body": [
            "all(${1:iterable})"
        ],
        "description": "return True if all elements of the iterable are true"
    },
    "any": {
        "prefix": "any",
        "body": [
            "any(${1:iterable})"
        ],
        "description": "return True if any element of the iterable is true"
    },
    "ascii": {
        "prefix": "ascii",
        "body": [
            "ascii(${1:str})"
        ],
        "description": "escape the non-ASCII characters"
    },
    "bin": {
        "prefix": "bin",
        "body": [
            "bin(${1:str})"
        ],
        "description": "convert a number to a binary string prefixed with “0b”."
    },
    "bool": {
        "prefix": "bool",
        "body": [
            "bool(${1:object})"
        ],
        "description": "return a boolean value"
    },
    "breakpoint": {
        "prefix": "breakpoint",
        "body": [
            "breakpoint()"
        ],
        "description": "drop you into the debugger"
    },
    "bytearray": {
        "prefix": "bytearray",
        "body": [
            "bytearray(${1:object})"
        ],
        "description": "return a new array of bytes"
    },
    "bytes": {
        "prefix": "bytes",
        "body": [
            "bytes(${1:object})"
        ],
        "description": "return a new “bytes” object"
    },
    "callable": {
        "prefix": "callable",
        "body": [
            "callable(${1:object})"
        ],
        "description": "return True if the object argument appears callable"
    },
    "chr": {
        "prefix": "chr",
        "body": [
            "chr(${1:integar})"
        ],
        "description": "return the string representing a character whose Unicode code point is the integer i"
    },
    "classmethod": {
        "prefix": "classmethod",
        "body": [
            "classmethod(${function})"
        ],
        "description": "transform a method into a class method"
    },
    "compile": {
        "prefix": "compile",
        "body": [
            "compile(${1:source}, ${2:filename}, ${3:mode})"
        ],
        "description": "compile the source into a code or AST object"
    },
    "complex": {
        "prefix": "complex",
        "body": [
            "complex{${1:object})"
        ],
        "description": "return a complex number or convert a string or number to a complex number"
    },
    "delattr": {
        "prefix": "",
        "body": [
            "delattr(${1:object}, ${2:name})"
        ],
        "description": "a relative of setattr()"
    },
    "dict": {
        "prefix": "dict",
        "body": [
            "dict()"
        ],
        "description": "create a new dictionary"
    },
    "dir": {
        "prefix": "dir",
        "body": [
            "dir()"
        ],
        "description": "return the list of names in the current local scope"
    },
    "divmod": {
        "prefix": "divmod",
        "body": [
            "divmod(${1:a}, ${2:b})"
        ],
        "description": "return a pair of numbers consisting of their quotient and remainder"
    },
    "enumerate": {
        "prefix": "enumerate",
        "body": [
            "enumerate(${1:iterable})"
        ],
        "description": "return an enumerate object"
    },
    "eval": {
        "prefix": "eval",
        "body": [
            "eval(${1:exp})"
        ],
        "description": "the expression argument is parsed and evaluated as a Python expression"
    },
    "exec": {
        "prefix": "exec",
        "body": [
            "exec(${1:object})"
        ],
        "description": "this function supports dynamic execution of Python code"
    },
    "filter": {
        "prefix": "filter",
        "body": [
            "filter(${1:func}, ${2:iterable})"
        ],
        "description": "construct an iterator from elements of iterable for which function returns true"
    },
    "float": {
        "prefix": "float",
        "body": [
            "float(${1:x})"
        ],
        "description": "return a floating point number constructed from a number or string x"
    },
    "format": {
        "prefix": "format",
        "body": [
            "format(${1:value})"
        ],
        "description": "convert a value to a “formatted” representation"
    },
    "frozenset": {
        "prefix": "frozenset",
        "body": [
            "frozenset(${1:iterable})"
        ],
        "description": "return a new frozenset object"
    },
    "getattr": {
        "prefix": "getattr",
        "body": [
            "getattr(${1:object}, ${2:name})"
        ],
        "description": "return a new frozenset object"
    },
    "globals": {
        "prefix": "globals",
        "body": [
            "globals()"
        ],
        "description": "return a dictionary representing the current global symbol table"
    },
    "hasattr": {
        "prefix": "hasattr",
        "body": [
            "hasattr(${1:object}, ${2:name})"
        ],
        "description": "return True if the string is the name of one of the object's attributes"
    },
    "hash": {
        "prefix": "hash",
        "body": [
            "hash(${1:object})"
        ],
        "description": "return the hash value of the object"
    },
    "help": {
        "prefix": "help",
        "body": [
            "help(${1:object})"
        ],
        "description": "invoke the built-in help system"
    },
    "hex": {
        "prefix": "hex",
        "body": [
            "hex(${1:x})"
        ],
        "description": "convert an integer number to a lowercase hexadecimal string prefixed with “0x”"
    },
    "id": {
        "prefix": "id",
        "body": [
            "id(${1:object})"
        ],
        "description": "return the 'identity' of an object"
    },
    "input": {
        "prefix": "input",
        "body": [
            "input()"
        ],
        "description": "read a line from input, converts it to a string"
    },
    "int": {
        "prefix": "int",
        "body": [
            "int(${1:x})"
        ],
        "description": "return an integer object constructed from a number or string x"
    },
    "isinstance": {
        "prefix": "isinstance",
        "body": [
            "isinstance(${1:object}, ${2:classinfo})"
        ],
        "description": "return true if the object argument is an instance of the classinfo argument"
    },
    "issubclass": {
        "prefix": "issubclass",
        "body": [
            "issubclass(${1:class}, ${2:classinfo})"
        ],
        "description": "return true if class is a subclass"
    },
    "iter": {
        "prefix": "iter",
        "body": [
            "iter(${1:object})"
        ],
        "description": "return an iterator object"
    },
    "len": {
        "prefix": "len",
        "body": [
            "len(${1:s})"
        ],
        "description": "return the length of an object"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:list}:",
            "    $3"
        ],
        "description": "create a loop"
    },
    "for...else": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:list}:",
            "    $3",
            "else:",
            "    $4"
        ],
        "description": "create a loop with else"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ${1:condition}:",
            "    $2"
        ],
        "description": "create a while loop"
    },
    "while...else": {
        "prefix": "while",
        "body": [
            "while ${1:condition}:",
            "    $2",
            "else:",
            "    $3"
        ],
        "description": "create a while loop with else"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "    $2"
        ],
        "description": "create a conditional statement"
    },
    "if...else": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "    $2",
            "else:",
            "    $3"
        ],
        "description": "create a condition statement with else"
    },
    "if...elif...else": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "    $2",
            "elif ${3:condition}:",
            "    $4",
            "else:",
            "    $5"
        ],
        "description": "a if statement with elif and else condition"
    },
    "raise": {
        "prefix": "raise",
        "body": [
            "raise ${1:type}(${2:message})"
        ],
        "description": "raise a error yourselves"
    },
    "assert": {
        "prefix": "assert",
        "body": [
            "assert ${1:condition}, ${2:message}"
        ],
        "description": "check if the condition is right"
    },
    "try...except": {
        "prefix": "try",
        "body": [
            "try:",
            "    $1",
            "except Exception as e:",
            "    $2"
        ],
        "description": "try something might be wrong"
    },
    "import": {
        "prefix": "import",
        "body": [
            "import ${1:module}"
        ],
        "description": "import a module directly"
    },
    "from...import": {
        "prefix": "from",
        "body": [
            "from ${1:module} import ${2:thing}"
        ],
        "description": "import a thing from a module"
    },
    "import...as": {
        "prefix": "import",
        "body": [
            "import ${1:module} as ${2:name}"
        ],
        "description": "import a module and rename it"
    },
    "from...import...as": {
        "prefix": "from",
        "body": [
            "from ${1:module} import ${2:thing} as ${3:name}"
        ],
        "description": "import a thing from a module and rename"
    },
    "with": {
        "prefix": "with",
        "body": [
            "with ${1:do} as ${2:name}:",
            "    $3"
        ],
        "description": "a more beautiful than try"
    },
    "global": {
        "prefix": "global",
        "body": [
            "global ${1:attr}"
        ],
        "description": "change the attr global"
    },
    "nonlocal": {
        "prefix": "nonlocal",
        "body": [
            "nonlocal ${1:attr}"
        ],
        "description": "use attr outside"
    },
    "lambda": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:attr}:${2:do}"
        ],
        "description": "create a simple function"
    },
    "yield": {
        "prefix": "yield",
        "body": [
            "yield ${1:thing}"
        ],
        "description": "yield to make lazy calculation"
    }
}